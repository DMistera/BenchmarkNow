// <auto-generated />
using System;
using BenchmarkNow;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BenchmarkNow.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220115013913_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BenchmarkNow.Algorithm", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Algorithm");
                });

            modelBuilder.Entity("BenchmarkNow.AlgorithmMeasurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AlgorithmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<int>("Parameter")
                        .HasColumnType("int");

                    b.Property<long>("ResultId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlgorithmName");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("ResultId");

                    b.ToTable("AlgorithmMeasurement");
                });

            modelBuilder.Entity("BenchmarkNow.AlgorithmMeasurementResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float>("AverageTime")
                        .HasColumnType("real");

                    b.Property<float>("StandardDeviation")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("AlgorithmMeasurementResult");
                });

            modelBuilder.Entity("BenchmarkNow.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("BenchmarkNow.Settings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("BinaryTrees")
                        .HasColumnType("int");

                    b.Property<int>("Fasta")
                        .HasColumnType("int");

                    b.Property<int>("Iterations")
                        .HasColumnType("int");

                    b.Property<int>("NBody")
                        .HasColumnType("int");

                    b.Property<int>("SpectralNorm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BenchmarkNow.UserSettings", b =>
                {
                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SettingsId")
                        .HasColumnType("bigint");

                    b.HasKey("IpAddress");

                    b.HasIndex("SettingsId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("BenchmarkNow.AlgorithmMeasurement", b =>
                {
                    b.HasOne("BenchmarkNow.Algorithm", "Algorithm")
                        .WithMany()
                        .HasForeignKey("AlgorithmName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenchmarkNow.Measurement", null)
                        .WithMany("AlgorithmMeasurements")
                        .HasForeignKey("MeasurementId");

                    b.HasOne("BenchmarkNow.AlgorithmMeasurementResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Algorithm");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("BenchmarkNow.UserSettings", b =>
                {
                    b.HasOne("BenchmarkNow.Settings", "Settings")
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("BenchmarkNow.Measurement", b =>
                {
                    b.Navigation("AlgorithmMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
